#!/usr/bin/env gjs

imports.gi.versions.Gdk = '3.0';
imports.gi.versions.Gtk = '3.0';

const Gdk = imports.gi.Gdk;
const Gio = imports.gi.Gio;
const GLib = imports.gi.GLib;
const Gtk = imports.gi.Gtk;

Gtk.init(null);

let CSS = '\
#main-grid {\
    padding: 10px;\
}\
#main-grid > * {\
    margin: 2px 0px;\
}\
#main-grid > label {\
    font-size: 18px;\
}\
#main-grid > separator {\
    background-color: #777;\
}\
.header {\
    padding-top: 20px; \
    font-weight: bold; \
}\
';

let provider = new Gtk.CssProvider();
provider.load_from_data(CSS);
let screen = Gdk.Screen.get_default();
Gtk.StyleContext.add_provider_for_screen(screen, provider, 1000);

let win = new Gtk.Window({
    title: 'Kactus',
    type_hint: Gdk.WindowTypeHint.DIALOG,
    resizable: false,
});
win.connect('destroy', () => {
    Gtk.main_quit();
});

let grid = new Gtk.Grid({
    orientation: Gtk.Orientation.VERTICAL,
    name: 'main-grid',
});
win.add(grid);

// Helpers
function add_header (text) {
    let label = new Gtk.Label({
        label: text,
    });
    label.get_style_context().add_class('header');
    grid.add(label);
    grid.add(new Gtk.Separator());
}

function add_label (text) {
    grid.add(new Gtk.Label({
        halign: Gtk.Align.START,
        label: text,
    }));
}

function add_file_chooser (globs) {
    let inner_grid = new Gtk.Grid();
    let filter = new Gtk.FileFilter();
    globs.forEach(glob => filter.add_pattern(glob));
    let file_chooser = new Gtk.FileChooserButton({
        filter: filter,
        halign: Gtk.Align.START,
    });
    let clear_button = Gtk.Button.new_from_icon_name('edit-delete-symbolic', Gtk.IconSize.BUTTON);
    clear_button.no_show_all = true;
    file_chooser.connect('selection-changed', () => clear_button.visible = !!file_chooser.get_filename());
    clear_button.connect('clicked', () => file_chooser.unselect_all());
    inner_grid.add(file_chooser);
    inner_grid.add(clear_button);
    grid.add(inner_grid);
    return file_chooser;
}

function show_message (text) {
    let dialog = new Gtk.MessageDialog({
        message_type: Gtk.MessageType.ERROR,
        text: text,
        urgency_hint: true,
        transient_for: win,
        buttons: Gtk.ButtonsType.OK,
    });
    dialog.run();
    dialog.destroy();
}

function read_sream (stream) {
    let output = '', buffer;
    do {
        buffer = stream.read_bytes(1024 * 8, null);
        output += buffer.get_data().toString();
    } while (buffer.get_size() !== 0);
    return output;
}

function show_output_dialog (output) {
    let text_view = new Gtk.TextView({
        editable: false,
        monospace: true,
        buffer: new Gtk.TextBuffer({ text: output }),
        visible: true,
    });
    let scroll = new Gtk.ScrolledWindow({
        expand: true,
        width_request: 1000,
        height_request: 400,
    });

    let display_button = new Gtk.Button({
        label: 'Show application output',
        visible: true,
    });
    display_button.connect('clicked', () => scroll.show());
    let copy_button = new Gtk.Button({
        label: 'Copy output to clipboard',
        visible: true,
    });
    let clipboard = Gtk.Clipboard.get_default(Gdk.Display.get_default());
    copy_button.connect('clicked', () => clipboard.set_text(output, -1));
    scroll.add(text_view);

    let grid = new Gtk.Grid({
        visible: true,
    });
    grid.attach(display_button, 0, 1, 1, 1);
    grid.attach(copy_button, 1, 1, 1, 1);
    grid.attach(scroll, 0, 2, 2, 1);

    let dialog = new Gtk.Dialog({
        urgency_hint: true,
        transient_for: win,
        modal: true,
        use_header_bar: true,
        title: 'Something went wrong :(',
    });
    dialog.get_content_area().add(grid);
    dialog.run();
    dialog.destroy();
}

function is_knowledge_app (app_id) {
    return GLib.get_system_data_dirs().some((path) => {
        // Our ekn data dir is not an export, so replace the export path with
        // the actual path within the flatpak deploy
        path = path.replace('flatpak/exports/share', 'flatpak/app/' + app_id + '/current/active/files/share');
        path = GLib.build_filenamev([path, 'ekn', 'data', app_id]);
        return Gio.File.new_for_path(path).query_exists(null);
    });
}

// App
add_label('Choose a knowledge app:');
let app_chooser = new Gtk.AppChooserButton({
    halign: Gtk.Align.START,
    show_default_item: true,
});
let selected_app_id = '';
for (let app of Gio.app_info_get_all()) {
    let app_id = app.get_id().split('.desktop')[0];
    let match = app_id.match(/com\.endlessm\..+\.(.+)/);
    if (match === null)
        continue;
    if (!is_knowledge_app (app_id))
        continue;
    let locale = match[1];
    let icon = app.get_icon();
    icon = icon ? icon : new Gio.ThemedIcon({ name: 'image-missing' });
    app_chooser.append_custom_item(app_id,
                                   app.get_name() + ' (' + locale + ')',
                                   icon);
}
app_chooser.connect('custom-item-activated', (chooser, app_id) => {
    selected_app_id = app_id;
});
grid.add(app_chooser);

add_label('Framework version:');
let framework_version_chooser = new Gtk.ComboBoxText({
    halign: Gtk.Align.START,
});
framework_version_chooser.append('master', 'Nightly');
framework_version_chooser.append('production', 'Production');
framework_version_chooser.set_active_id('master');
grid.add(framework_version_chooser);

add_label('Update application and framework:');
let update_switch = new Gtk.Switch({
    halign: Gtk.Align.START,
    active: true,
});
grid.add(update_switch);

// Modules
add_header('Modules');
add_label('Choose a custom app json file (.yaml or .json):');
let app_json_file_chooser = add_file_chooser(['*.json', '*.yaml']);

// Theme
add_header('Theme');
add_label('Choose a stock theme (overrides application theme):');
let stock_theme_chooser = new Gtk.ComboBoxText({
    halign: Gtk.Align.START,
});
[
    '',
    'default',
    'blog',
    'buffet',
    'encyclopedia',
    'escola',
    'gallery',
    'library_list',
    'news',
    'preset_a',
    'preset_b',
    'video_list',
].forEach((item) => {
    stock_theme_chooser.append(item, item);
});
grid.add(stock_theme_chooser);
add_label('OR choose a custom theme file (.scss or .css):');
let theme_file_chooser = add_file_chooser(['*.css', '*.scss']);

// Content
add_header('Content');
add_label('Use dummy content:');
let dummy_content_switch = new Gtk.Switch({
    halign: Gtk.Align.START,
});
grid.add(dummy_content_switch);

// Runner
let done_button = new Gtk.Button({
    label: 'Done',
    halign: Gtk.Align.END,
});
done_button.get_style_context().add_class(Gtk.STYLE_CLASS_SUGGESTED_ACTION);
grid.add(done_button);
done_button.connect('clicked', () => {
    if (!selected_app_id) {
        show_message('Choose an app!');
        return;
    }

    let args = ['./kactus-runner'];
    let branch = '';
    if (framework_version_chooser.get_active_id() === 'master')
        branch = 'master';
    args.push(branch);
    if (update_switch.get_active()) {
        show_message('Updating app and libraries, this may take a while...');
        args.push('update');
    }
    args.push(selected_app_id);
    args.push('--recompile-all');
    if (app_json_file_chooser.get_filename())
        args.push('--app-json-path', app_json_file_chooser.get_filename());
    if (theme_file_chooser.get_filename())
        args.push('--theme-overrides-path', theme_file_chooser.get_filename());
    if (stock_theme_chooser.get_active_text())
        args.push('--theme-name', stock_theme_chooser.get_active_text());
    if (dummy_content_switch.get_active())
        args.push('--dummy-content');
    win.get_window().cursor = Gdk.Cursor.new_for_display(Gdk.Display.get_default(), Gdk.CursorType.WATCH);
    win.set_sensitive(false);
    let app_process = Gio.Subprocess.new(args, Gio.SubprocessFlags.STDOUT_PIPE | Gio.SubprocessFlags.STDERR_MERGE);
    app_process.wait_async(null, (app_process, result)  => {
        app_process.wait_finish(result);
        win.get_window().cursor = null;
        win.set_sensitive(true);
        if (app_process.get_if_exited() && app_process.get_exit_status() === 0)
            return;
        show_output_dialog(read_sream(app_process.get_stdout_pipe()));
    });
});

win.show_all();
Gtk.main();
