#!/usr/bin/env python3

# Copyright 2016 Endless Mobile, Inc.

import argparse
import collections
import datetime
import json
import os
import os.path
import polib
import re
import sys
import yaml

"""
For those interested in Autobahn's etymology, it goes roughly like this:
JSON -> Jason Schwartzman -> Shwartz -> Spaceballs -> Radar jammed -> Jam
sandwich -> Cheese sandwich -> Kraft singles -> Kraftwerk -> Autobahn
"""

overrides = None
preset = None


# This allows you to put a shortdef string (see below) into a slot, instead of
# a module description.
def expand_slot_shorthand(module):
    if isinstance(module, str):
        return {'shortdef': module}
    return module


# This is a shorthand which allows you to specify type and properties in one
# string: 'MyModule{prop: value, prop2: value2}'. The properties part is a YAML
# dictionary. Note that you do have to enclose the string in quotes in YAML,
# because {, }, and : are active characters.
def expand_shortdef(module):
    if ('type' in module or 'properties' in module) and 'shortdef' in module:
        raise ValueError('If you use "shortdef" then you cannot also have '
            '"type" and "properties".')

    shortdef = module.pop('shortdef', None)
    if shortdef is None:
        return module

    match = re.match(r'^([a-zA-Z0-9_.]+)\s*\((.*)\)\s*$', shortdef)
    if match is None:
        module['type'] = shortdef
        return module

    typename, propstring = match.group(1, 2)
    module['properties'] = yaml.load('{' + propstring + '}')
    module['type'] = typename

    return module


def sorted_ordered_dict(regdict):
    sorted_items = sorted(regdict.items(), key=lambda t: t[0])
    return collections.OrderedDict(sorted_items)


def recursive_ordered_dict(regdict):
    ordered_dict = sorted_ordered_dict(regdict)
    for key in ordered_dict:
        if type(ordered_dict[key]) == dict:
            ordered_dict[key] = recursive_ordered_dict(ordered_dict[key])
    return ordered_dict


def order_module_keys(module):
    retval = collections.OrderedDict()
    if 'type' in module:
        retval['type'] = module['type']
    if 'id' in module:
        retval['id'] = module['id']
    if 'styles' in module:
        retval['styles'] = sorted(module['styles'])
    if 'properties' in module:
        retval['properties'] = recursive_ordered_dict(module['properties'])
    for key in ('slots', 'references'):
        if key in module:
            retval[key] = sorted_ordered_dict(module[key])
    return retval

def expand_slot_refvar(module):
    if isinstance(module, str) and module.startswith('$'):
        return {'refvar': module}
    return module

def expand_refvar(module):
    if not preset or 'vars' not in preset or 'refvar' not in module:
        return module

    var = module.pop('refvar')[1:]
    if var not in preset['vars']:
        raise ValueError('var %s not defined in preset.' % var)

    if overrides and var in overrides:
        content = overrides[var]
    else:
        content = preset['vars'][var]
    module.update(content)

    return module


def expand_overrides(overrides):
    for key in overrides:
        overrides[key] = walk(overrides[key], expand_slot_shorthand)
        overrides[key] = walk(overrides[key], expand_shortdef)
    return overrides


def process_custom_overrides(overrides, tree):
    if not overrides:
        return
    for key in overrides:
        if key.startswith('root'):
            apply_custom_override(overrides, tree, key)


def apply_custom_override(overrides, node, name):
    components = name.split('.')
    for key in components[1:]:
        try:
            if isinstance(node, list):
                node = node[int(key)]
            else:
                node = node['slots'][key]
        except:
            return
    node.update(overrides[name])


def walk(module_tree, transform_func):
    # Transform first, in case the transformation adds slots
    if isinstance(module_tree, list):
        return [walk(t, transform_func) for t in module_tree]
    module_tree = transform_func(module_tree)
    if 'slots' in module_tree:
        slots = module_tree['slots']
        for slot in slots:
            slots[slot] = walk(slots[slot], transform_func)
    return module_tree


def preprocess(infile):
    global overrides
    global preset

    docs = yaml.load_all(infile)
    doc = next(docs)

    if 'overrides' in doc:
        overrides = expand_overrides(doc['overrides'])
        doc = next(docs)
    preset = doc

    tree = doc['root']
    tree = walk(tree, expand_slot_refvar)
    tree = walk(tree, expand_refvar)
    tree = walk(tree, expand_slot_shorthand)
    tree = walk(tree, expand_shortdef)
    process_custom_overrides(overrides, tree)
    tree = walk(tree, order_module_keys)

    app = collections.OrderedDict((
        ('version', 2),
        ('root', tree),
    ))

    return json.dumps(app, indent=2)


def remove_output(f):
    if f is sys.stdout:
        return
    f.close()
    os.unlink(f.name)


def translate(loader, node):
    source = node.start_mark.name
    filename = source if source != '<unicode string>' else infile_name
    occurrence = os.path.relpath(filename), node.start_mark.line
    try:
        pot.append(polib.POEntry(msgid=node.value, occurrences=[occurrence]))
    except ValueError:
        entry = pot.find(node.value)
        entry.occurrences.append(occurrence)

    if po is None:
        return node.value
    entry = po.find(node.value)
    translated = entry is not None and entry.translated()
    return entry.msgstr if translated else node.value


def import_yaml(loader, node):
    if not include_path:
        raise ValueError('You must specify the path for the .yaml files.');
    yaml_file = node.value + os.extsep + 'yaml'
    filename = os.path.join(include_path, yaml_file)
    with open(filename, 'r') as stream:
        return yaml.load(stream)


# Shared state
pot = polib.POFile(check_for_duplicates=True)
pot.metadata = {
    'POT-Creation-Date': datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M+0000'),
    'MIME-Version': '1.0',
    'Content-Type': 'text/plain; charset=utf-8',
    'Content-Transfer-Encoding': '8bit',
}
po = None
infile_name = None
include_path = None

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Preprocess app.json.')
    parser.add_argument('input', nargs='?', default=sys.stdin,
                        type=argparse.FileType('r'),
                        help='Input file (default: stdin)')
    parser.add_argument('-o', '--output', default=sys.stdout,
                        type=argparse.FileType('w'),
                        help='File to write (default: stdout)')
    parser.add_argument('-c', '--catalog', action='store_true',
                        help='Write a .pot message catalog instead of JSON')
    parser.add_argument('-t', '--translations',
                        type=argparse.FileType('r', encoding='utf-8'),
                        help='.po file to use for translations (default: none)')
    parser.add_argument('-I', '--include', type=str, default=None,
                        help='Path to the .yaml files (default: none)')
    args = parser.parse_args()

    infile_name = args.input.name
    include_path = args.include

    yaml.add_constructor('!translate', translate)
    yaml.add_constructor('!import', import_yaml)

    if args.translations:
        po = polib.pofile(args.translations.read())

    try:
        dumped_json = preprocess(args.input)
        if args.catalog:
            args.output.write(str(pot))
        else:
            args.output.write(dumped_json)
    except yaml.error.MarkedYAMLError as exc:
        remove_output(args.output)
        sys.stderr.write('Invalid YAML: ' + str(exc) + '\n')
        sys.exit(1)
    except Exception:
        remove_output(args.output)
        raise
    else:
        args.output.write('\n')
