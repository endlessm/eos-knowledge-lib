#!/usr/bin/env python3

import argparse
import difflib
import itertools
import json
import os
import sys

import gi
gi.require_version('EosShard', '0')
from gi.repository import EosShard

CURRENT_DIR = os.getcwd()

COLORS = {
    'cyan': '\033[36m',
    'green': '\033[32m',
    'red': '\033[31m',
    'reset': '\033[0m',
}

def get_shards(shard_dir):
    shards = []

    for filename in os.listdir(shard_dir):
        full_filename = os.path.join(shard_dir, filename)
        if not os.path.isfile(os.path.join(shard_dir, filename)):
            continue

        if not filename.endswith('.shard'):
            continue

        shard = EosShard.ShardFile(path=full_filename)
        shard.init(None)
        shards.append(shard)

    return shards


def parse_shard(assets, shard):
    shard_name = os.path.basename(shard.get_property('path'))
    assets_count = 0
    articles_count = 0

    for record in shard.list_records():
        if record.metadata is None:
            continue

        asset = json.loads(record.metadata.load_contents().get_data().decode('utf-8'))

        asset['shard'] = shard_name

        title = asset.get('title', 'Unknown title')
        assets.setdefault(title, [])
        assets[title].append(asset)

        assets_count += 1
        if asset['contentType'] == 'text/html':
            articles_count += 1

    print(' - {} ({} assets, {} articles)'.format(shard_name,
                                                  assets_count,
                                                  articles_count))

    return articles_count


def get_duplicate_articles(assets):
    for article_assets in assets.values():
        articles = [asset for asset in article_assets if asset['contentType'] == 'text/html']

        if len(articles) > 1:
            yield articles


def print_color_diff(line):
    # Only show color if running in interactive terminal
    if not os.isatty(sys.stdout.fileno()):
        print(line)
        return

    color_prefix = COLORS['reset']
    if line.startswith('+'):
        color_prefix = COLORS['green']
    elif line.startswith('-'):
        color_prefix = COLORS['red']
    elif line.startswith('@@ '):
        color_prefix = COLORS['cyan']

    print('{}{}{}'.format(color_prefix, line, COLORS['reset']))


def process_duplicates(shard_dir):
    print('Examining shard dir: {}'.format(shard_dir))

    shards = get_shards(shard_dir)
    print('Found shards:')
    for shard in shards:
        print(' - {}'.format(shard))
    print()

    assets = {}
    total_articles = 0

    print('Collecting items in the shards...')
    for shard in shards:
        # Note: Assets is mutated in the call
        total_articles += parse_shard(assets, shard)
    print()

    total_unique_articles = len(assets)
    print('Unique articles found: {}'.format(total_unique_articles))
    print('Unique articles expected: {}'.format(total_articles))
    print()

    # If no duplicates, exit out early
    if total_articles == total_unique_articles:
        print('No duplicate articles found!')
        return

    # Otherwise, assume that we have duplicates
    print('WARNING! There seems to be {} duplicate articles in these shards!'.format(
        total_articles - total_unique_articles))
    print()

    for duplicate_article in get_duplicate_articles(assets):
        title = duplicate_article[0]['title']
        print('Duplicate ({}x): "{}"'.format(len(duplicate_article), title))
        print()

        metadatas = []
        for article_asset in duplicate_article:
            shard = article_asset['shard']
            ekn_id = article_asset['@id']
            print(' - Shard: {}, Ekn ID: {}'.format(shard, ekn_id))

            metadatas.append(article_asset)

        print()

        for combination in itertools.combinations(metadatas, 2):
            obj1, obj2 = combination
            print(' Comparing {} with {}'.format(obj1['@id'], obj2['@id']))

            obj1_text = json.dumps(obj1, indent=4, sort_keys=True).splitlines()
            obj2_text = json.dumps(obj2, indent=4, sort_keys=True).splitlines()

            for line in difflib.unified_diff(obj1_text, obj2_text):
                print_color_diff(line)

        print()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Examines groups of shards and identifies problems')

    parser.add_argument('shard_dir',
                        nargs='?',
                        default=CURRENT_DIR,
                        help='Root directory containing all the shards'
                             ' (default: "{}")'.format(CURRENT_DIR))

    args = parser.parse_args()

    process_duplicates(args.shard_dir)
