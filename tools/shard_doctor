#!/usr/bin/env python3

"""
This CLI tool is used to detect and show any duplicate articles
in the `shard_dir` provided or the app manifest (if available).

Examples:

    $ ./shard_doctor
    $ ./shard_doctor /path/to/shards
"""

import argparse
import configparser
import difflib
import gi
import itertools
import json
import os
import sys

gi.require_version('EosShard', '0')
from gi.repository import EosShard

CURRENT_DIR = os.getcwd()

FLATPAK_INFO = '/.flatpak-info'

COLORS = {
    'cyan': '\033[36m',
    'green': '\033[32m',
    'red': '\033[31m',
    'reset': '\033[0m',
}


def find_app_manifest():
    """
    Finds the app manifest if it is available to the current
    runtime or environment that you are running in.

    :returns: Path to the manifest, if available. None otherwise.

    """
    running_in_flatpak = os.path.isfile(FLATPAK_INFO)
    if not running_in_flatpak:
        return None

    config = configparser.ConfigParser()
    config.read(FLATPAK_INFO)

    # Check if we are in an app runtime
    if 'Application' not in config.sections():
        return None

    # Assemble the manifest name
    app_id = config.get('Application', 'name')
    manifest_prefix = os.getenv('XDG_DATA_HOME')
    manifest_path = os.path.join(manifest_prefix,
                                 'ekncontent.{}.manifest.json'.format(app_id))

    # Sanity check
    if not os.path.isfile(manifest_path):
        print('Could not find manifest at {}!'.format(manifest_path))
        return None

    print('Manifest found: {}'.format(manifest_path))
    return manifest_path


def get_shard(shard_path):
    """
    Loads the shard with introspection and returns the loaded object

    :param shard_path: Path to the shard
    :returns: Loaded shard object

    """
    print('Loading shard: {}'.format(os.path.basename(shard_path)))
    if not os.path.isfile(shard_path):
        return None

    if not shard_path.endswith('.shard'):
        return None

    shard = EosShard.ShardFile(path=shard_path)
    shard.init(None)

    return shard


def get_shards_in_dir(shard_dir):
    """
    Finds all shards in a directory and returns them as introspection-
    loaded objects.

    :params shard_dir: Path to the shard parent directory
    :returns: Array of loaded shard objects
    """
    print('Examining shard dir: {}'.format(shard_dir))
    shards = []
    for filename in os.listdir(shard_dir):
        shard_path = os.path.join(shard_dir, filename)
        shard = get_shard(shard_path)
        if shard:
            shards.append(shard)

    return shards


def get_shards_in_manifest(manifest_path):
    """
    Finds all shards specified in the app manifest and returns
    them as introspection-loaded objects.

    :param manifest_path: Path to the app ekn manifest
    :returns: Array of loaded shard objects
    """
    print('Examining manifest: {}'.format(manifest_path))

    manifest_dir = os.path.dirname(manifest_path)

    data = json.load(open(manifest_path))
    shard_paths = [shard['path'] for shard in data['xapian_databases']]

    # Resolve relative paths and make paths absolute
    shard_paths = [os.path.abspath(os.path.join(manifest_dir, shard))
                   for shard in shard_paths]

    shards = []
    for shard_path in shard_paths:
        shard = get_shard(shard_path)
        if shard:
            shards.append(shard)

    return shards


def parse_shard(assets, shard):
    """
    Parses the shard object and appends any articles it finds to the
    `assets` dictionary under the `asset.title` key

    :param assets: Current state of the asset dictionary
    :param shard: Shard object to parse
    :returns: Nothing but `assets` object does change
    """
    shard_name = os.path.basename(shard.get_property('path'))
    assets_count = 0
    articles_count = 0

    for record in shard.list_records():
        if record.metadata is None:
            continue

        assets_count += 1

        asset = json.loads(record.metadata.load_contents()
                           .get_data()
                           .decode('utf-8'))

        # Skip inspecting non-article assets
        if asset.get('contentType', None) != 'text/html':
            continue

        articles_count += 1

        asset['shard'] = shard_name

        title = asset.get('title', 'Unknown title')
        assets.setdefault(title, [])
        assets[title].append(asset)

    print(' - {} ({} assets, {} articles)'.format(shard_name,
                                                  assets_count,
                                                  articles_count))

    return articles_count


def get_duplicate_articles(assets):
    """
    Goes through the assets list and returns any that have duplicates

    :param assets: Current state of the asset dictionary
    :returns: Iterator for the list of articles with duplicate entries
    """
    for article_assets in assets.values():
        articles = [asset
                    for asset in article_assets
                    if asset.get('contentType', None) == 'text/html']

        if len(articles) > 1:
            yield articles


def print_color_diff(line):
    """
    Colorizes the output since the passed-in format highly
    resembless the standard patch format and is easier on the
    eyes

    :param line: Line to be printed
    :returns: None
    """
    # Only show color if running in interactive terminal
    if not os.isatty(sys.stdout.fileno()):
        print(line)
        return

    color_prefix = COLORS['reset']
    if line.startswith('+'):
        color_prefix = COLORS['green']
    elif line.startswith('-'):
        color_prefix = COLORS['red']
    elif line.startswith('@@ '):
        color_prefix = COLORS['cyan']

    print('{}{}{}'.format(color_prefix, line, COLORS['reset']))


def process_duplicates(shard_dir=None, manifest=None):
    """
    Goes through either the shard_dir or manifest shards and shows
    any duplicate articles along with their metadata diffs.

    :param shard_dir: Directory to look into. Takes precedence over
                      manifest param
    :param manifest: If specified, contains path to the app manifest
    :returns: None
    """
    shards = None
    if shard_dir:
        shards = get_shards_in_dir(shard_dir)
    else:
        shards = get_shards_in_manifest(manifest)

    print()

    assets = {}
    total_articles = 0

    print('Collecting items in the shards...')
    for shard in shards:
        # Note: Assets is mutated in the call
        total_articles += parse_shard(assets, shard)
    print()

    total_unique_articles = len(assets)
    print('Unique articles found: {}'.format(total_unique_articles))
    print('Unique articles expected: {}'.format(total_articles))
    print()

    # If no duplicates, exit out early
    if total_articles == total_unique_articles:
        print('No duplicate articles found!')
        return

    # Otherwise, assume we have duplicates or some articles are not parsable
    print('WARNING! There seems to be {} article difference in these shards!'.format(
        total_articles - total_unique_articles))
    print()

    for duplicate_article in get_duplicate_articles(assets):
        title = duplicate_article[0]['title']
        print('Duplicate ({}x): "{}"'.format(len(duplicate_article), title))
        print()

        metadatas = []
        for article_asset in duplicate_article:
            shard = article_asset['shard']
            ekn_id = article_asset['@id']
            print(' - Shard: {}, Ekn ID: {}'.format(shard, ekn_id))

            metadatas.append(article_asset)

        print()

        for combination in itertools.combinations(metadatas, 2):
            obj1, obj2 = combination
            print(' Comparing {} with {}'.format(obj1['@id'], obj2['@id']))

            obj1_text = json.dumps(obj1, indent=4, sort_keys=True).splitlines()
            obj2_text = json.dumps(obj2, indent=4, sort_keys=True).splitlines()

            for line in difflib.unified_diff(obj1_text, obj2_text):
                print_color_diff(line)

        print()


if __name__ == '__main__':
    app_manifest = find_app_manifest()

    # Allow us to skip shard_dir if manifest is found
    shard_dir_nargs = None
    if app_manifest:
        shard_dir_nargs = '?'

    parser = argparse.ArgumentParser(
        description='Examines groups of shards and identifies problems')

    parser.add_argument('shard_dir',
                        nargs=shard_dir_nargs,
                        default=None,
                        help='Root directory containing all the shards '
                             '(optional if launched in an app runtime)')

    args = parser.parse_args()
    process_duplicates(shard_dir=args.shard_dir, manifest=app_manifest)
